buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE')
    classpath('org.liquibase:liquibase-gradle-plugin:1.2.1')
    classpath('org.yaml:snakeyaml:1.15')
    classpath('org.postgresql:postgresql:9.4.1208')
    classpath('se.transmode.gradle:gradle-docker:1.2')
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'docker'
apply plugin: 'spring-boot'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'jacoco'
apply plugin: 'distribution'

group 'works.nichols'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
  profile = project.hasProperty('profile') ? project.getProperty('profile') : 'dev'
  version
  new File('VERSION').withReader { version = it.readLine().split()[1] }
  sha = 'git rev-parse --short HEAD'.execute().text.trim()
}

repositories {
  mavenCentral()
}

configurations {
  providedRuntime
}

distributions {
  main {
    contents {
      from { jar }
    }
  }
}

distTar {
  compression = Compression.GZIP
  archiveName = "${baseName}-${project.ext.version}-${project.ext.sha}.${extension}"
}

dependencies {
  compile('io.springfox:springfox-swagger2:2.5.0')
  compile('io.springfox:springfox-swagger-ui:2.5.0')
  compile('org.projectlombok:lombok:1.16.4')

  compile('org.springframework.boot:spring-boot-starter-web')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('org.springframework.security.oauth:spring-security-oauth2')
  compile('org.webjars:webjars-locator')
  compile('org.webjars:angularjs:1.4.3')
  compile('org.webjars:jquery:2.1.1')
  compile('org.webjars:bootstrap:3.2.0')

  compile('org.springframework.boot:spring-boot-starter-actuator')
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.springframework:spring-jdbc')
  compile('org.hibernate:hibernate-core:5.2.1.Final')
  compile('org.hibernate:hibernate-java8:5.2.1.Final')
  compile('org.hibernate:hibernate-entitymanager:5.2.1.Final')
  compile('org.postgresql:postgresql')

  testCompile('org.springframework.boot:spring-boot-starter-test')

  providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
}

springBoot {
  mainClass = 'works.nichols.media.Application'
}

bootRun {
  jvmArgs = [ '-Dspring.profiles.active=' + profile ]
}

liquibase {
  activities {
    Properties springProps = new Properties()
    springProps.load(new FileInputStream(file('src/main/resources/application-' + profile + '.yml')))

    main {
      driver springProps['driver-class-name']
      changeLogFile 'src/main/resources/db/master.yaml'
      url springProps['url']
      username springProps['username']
      password springProps['password']
      liquibaseSchemaName 'liquibase'
    }
  }
}
